#!/usr/bin/env php
<?php
require_once __DIR__.'/vendor/autoload.php';

?>
# Skylab

Skylab is a 100% backwards compatible PHP port of the Python based hosting scripts used at Kunstmaan. By using the Cilex,
Symfony Components and lots of good code samples from the Composer project we hope to create an application that
everyone in our organisation can work with, and if issues or new needed features should arise, be able to work on.

Kunstmaan wouldn't be Kunstmaan if we didn't open-source this, so here it is. [MIT licensed](./LICENSE).

## Installation

To install Skylab, run this command:

```
$ curl -sSL https://raw.github.com/Kunstmaan/skylab/master/installer | php
```

This will just check a few PHP settings and then download skylab.phar to your working directory. This file is the Skylab
binary. It is a PHAR (PHP archive), which is an archive format for PHP which can be run on the command line, amongst
other things.

You can install Skylab to a specific directory by using the --install-dir option and providing a target directory (it
can be an absolute or relative path):

```
$ curl -sSL https://raw.github.com/Kunstmaan/skylab/master/installer | php -- --install-dir=/bin
```

You can also install Skylab globally by running:

```
$ curl -sSL https://raw.github.com/Kunstmaan/skylab/master/installer | php
$ mv skylab.phar /usr/local/bin/skylab
```

## Configuration

You can override the [default configuration](./config.yml) by creating a file /etc/skylab.yml and give it a secure chmod
```
sudo chmod 700 /etc/skylab.yml
```

For example if you installed skylab on a developer OSX machine:
```
users:
    wwwuser:        apache

webserver:
    engine: apache
    hostmachine: XXXXX.kunstmaan.be

mysql:
    user:     root
    password: XXXXXXXXX

postgresql:
    user:     postgres
    password: XXXXXXXXX

debug: true
develmode: true
```

Or on an ubuntu system:
```
users:
    wwwuser: www-data

webserver:
    engine: apache
    hostmachine: XXXXX.kunstmaan.be

mysql:
    user:     root
    password: XXXXXXXXX

postgresql:
    user:     postgres
    password: XXXXXXXXX

debug: true
develmode: true
```
## Special Skeletons
### SSL skeleton
The ```ssl``` skeleton can be used to configure the SSL configurations in apache via the config.xml

You start by adding ```<item value="ssl"/>``` to the skeletons in config.xml. Then you need to add ```<var name="project.sslConfig">``` to the config.xml to configure the SSL configuration.

You can specify different SSL configuration that has to be used per environment. The syntax for each environment is the same
```
<var name="{environment}">
  <dir value="{the location of the ssl files (cert, key, ca)}"/>
  <certFile value="{the name of the cert file}"/>
  <certKeyFile value="{the name of the key file}"/>
  <caCertFile value="{the name of the ca cert file}"/>
</var>
```

Example (we assume three environments (dev,staging,prod)).
```
<var name="project.sslConfig">
    <var name="dev">
      <dir value="/home/myproject/ssl/dev/"/>
      <certFile value="myproject_dev_ssl.crt"/>
      <certKeyFile value="myproject_dev_ssl.key"/>
      <caCertFile value="myproject_dev_ssl.ca-bundle"/>
    </var>
    <var name="staging">
      <dir value="/home/myproject/ssl/staging/"/>
      <certFile value="myproject_staging_ssl.crt"/>
      <certKeyFile value="myproject_staging_ssl.key"/>
      <caCertFile value="myproject_staging_ssl.ca-bundle"/>
    </var>
    <var name="prod">
      <dir value="/home/myproject/ssl/prod/"/>
      <certFile value="myproject_prod_ssl.crt"/>
      <certKeyFile value="myproject_prod_ssl.key"/>
      <caCertFile value="myproject_prod_ssl.ca-bundle"/>
    </var>
  </var>
```

Which ssl configuration will be used depends on the value ```env``` in you skylab.yml file. Locally you should have ```env: dev``` in you skylab.yml configuration file. If you do then when running maintenance it will add the dev SSL config in apache.

###Letsencrypt skeleton
The ```letsencrypt``` skeleton can be used to generate ssl certificates for your site using the Let's Encrypt service.

To enable the use of letsenecrypt you have to add ```<item value="letsenecrypt"/>``` to the config.xml.

The skeleton will create a ssl certificate for the urls ```project.url``` and all the aliases in ```project.aliases```.

IMPORTANT NOTES:
1. The letsencrypt skeleton will run the command only on a production server.
1. Make sure the urls resolve to the IP where the command will run, otherwise it will fail.
1. You can use the ```ssl``` and ```letsencrypt``` skeletong together, BUT when enabling both the skeletons you must remove the prod ssl config. If the prod ssl config is available it will use that config instead of running letsencrypt.
1. The letsencrypt skeleton also creates a cronjob to renew the certs (e.g. 0 0 * * 0 letsencrypt --apache -n certonly -d myproject.com)

## Commands

<?php


describeCommand(new \Kunstmaan\Skylab\Command\NewProjectCommand());
describeCommand(new \Kunstmaan\Skylab\Command\FetchCommand());
describeCommand(new \Kunstmaan\Skylab\Command\ShareCommand());
describeCommand(new \Kunstmaan\Skylab\Command\SetPermissionsCommand());
describeCommand(new \Kunstmaan\Skylab\Command\MaintenanceCommand());
describeCommand(new \Kunstmaan\Skylab\Command\BackupCommand());
describeCommand(new \Kunstmaan\Skylab\Command\RemoveProjectCommand());
describeCommand(new \Kunstmaan\Skylab\Command\ApplySkeletonCommand());
describeCommand(new \Kunstmaan\Skylab\Command\SelfUpdateCommand());

function describeCommand(\Kunstmaan\Skylab\Command\AbstractCommand $command){
    echo "### " . get_class_name($command) . "\n\n";
    echo "Usage: ```php skylab.phar " . $command->getSynopsis() . "```\n\n";
    echo str_replace("</info>", "```", str_replace("<info>", "```", $command->getProcessedHelp())) . "\n";
    echo "Full details at [doc/".get_class_name($command).".md](doc/".get_class_name($command).".md)\n\n";
    system("mkdir -p doc");
    system("SU=true  ./skylab help " . $command->getName() . " --format=md > doc/".get_class_name($command).".md");
    system('printf "\n\n" >> doc/' .get_class_name($command).".md");
    system("echo '*Documentation generated on " . date_format(new DateTime(), "Y-m-d H:i:s") . "*' >> doc/".get_class_name($command).".md");
}

function get_class_name($object = null)
{
    if (!is_object($object) && !is_string($object)) {
        return false;
    }
    $class = explode('\\', (is_string($object) ? $object : get_class($object)));
    return $class[count($class) - 1];
}

?>

## Compiling a new version

1. First, make sure everything works and the Travis tests are green [![Build Status](https://travis-ci.org/Kunstmaan/skylab.png?branch=master)](https://travis-ci.org/Kunstmaan/skylab)
1. Generate an updated changelog using ```git changelog``` from [git-extras](https://github.com/visionmedia/git-extras)
1. Commit this new changelog
1. Create a new release from the Github interface, add the new changelog part in the description and name the release for [the next brightst star in this list](http://en.wikipedia.org/wiki/List_of_brightest_stars)
1. Compile a new version ```./compile --version 0.1.2```
1. Add the new phar file to the release on GitHub

## Modifying the documentation

1. Most text is in ```gen-doc```, edit what you want there.
1. Everything in doc/ is generated, same goes for everything in README.md under Commands
1. Run ```./gen-doc > README.md``` to update the docs
1. Send a pull request

## Contributing

1. Fork Skylab
1. Do your thing, and send a Pull Request. But please make sure Travis is green and your code has been run through php-cs-fixer!


[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/Kunstmaan/skylab/badges/quality-score.png?s=3d1f00bf9c2adbba818f274086db3ed4b2bcc4e2)](https://scrutinizer-ci.com/g/Kunstmaan/skylab/)


<?php

echo "*Documentation generated on " . date_format(new DateTime(), "Y-m-d H:i:s") . "*";


